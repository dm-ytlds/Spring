<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">


        <!--声明数据源-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!--set注入给DruidDataSource提供链接数据库信息-->
        <property name="url" value="jdbc:mysql://localhost:3306/testsql" />
        <property name="username" value="root" />
        <property name="password" value="1233" />
        <property name="maxActive" value="20" />
    </bean>

    <!--声明数据源可以使用配置文件的方式写入
        创建一个jdbc.properties文件，将数据库连接信息写入
        然后使用context标签属性 property-placeholder 进行文件位置的声明
    -->
   <!-- <context:property-placeholder location="classpath:jdbc.properties" />
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="name" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="maxActive" value="${jdbc.maxActive}" />
    </bean>-->


    <!--声明mybatis中提供的SqlSessionFactoryBean类，在这个类内部创建SqlSessionFactory-->

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--set注入，把数据库连接池赋给了dataSource属性-->
        <property name="dataSource" ref="myDataSource" />

        <!--mybatis主配置文件的位置
            configLocation属性是Resource类型，读取配置文件。
            使用value来指定文件的路径，在value中使用classpath:表示文件的位置
        -->
        <property name="configLocation" value="classpath:mybatis.xml" />
    </bean>

    <!--创建dao对象，使用SqlSession的getMapper(StudentDao.class)
        MapperScannerConfigurer：在内部调用getMapper()生成每个dao接口的代理对象。
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定SqlSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />

        <!--指定包名，包名是dao接口的包名
            MapperScannerConfigurer会扫描这个包中所有的接口，
            把每个接口都执行一次getMapper()方法，得到每个接口的dao对象。
            多个包的话，可以用","进行分隔。
            创建好的dao对象放入到spring容器中。dao对象的默认名称是 接口名的首字母小写


        -->
        <property name="basePackage" value="demi.demos.domain.dao" />
    </bean>

    <bean id="studentService" class="demi.demos.service.impl.StudentServiceImpl">
        <property name="studentDao" ref="studentDao" />
    </bean>

</beans>